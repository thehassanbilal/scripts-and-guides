Certainly! Here's a detailed article on setting up a subdomain for accessing a MongoDB database securely using Nginx, Certbot, and PM2.

---

# Accessing MongoDB via a Subdomain: A Secure Configuration Guide

In today’s digital landscape, securing database access is crucial. If you’re running a MongoDB instance and want to make it accessible via a subdomain, leveraging Nginx for reverse proxying, PM2 for process management, and Certbot for SSL certificates is an optimal solution. This guide will walk you through the steps to securely configure MongoDB access through a subdomain.

## Prerequisites

Before proceeding, ensure that you have the following:

- A running MongoDB instance on your server.
- Nginx installed on the server.
- Certbot installed for SSL certificate management.
- Domain name management access to create a subdomain.
- Basic knowledge of server administration and command-line operations.

## Step 1: Set Up the Subdomain

The first step is to create a subdomain that will be used to access MongoDB.

1. **DNS Configuration:**
   - Log in to your DNS provider’s dashboard.
   - Add an `A` record for your desired subdomain (e.g., `mongo.example.com`) pointing to the server's IP address where MongoDB is hosted.

## Step 2: Configure Nginx as a Reverse Proxy

Using Nginx as a reverse proxy provides an additional layer of abstraction and control between the client and the server.

1. **Create Nginx Configuration:**
   - Create a new configuration file for the subdomain:
     ```bash
     sudo nano /etc/nginx/sites-available/mongo.example.com
     ```
   - Add the following configuration to forward traffic to MongoDB:
     ```nginx
     server {
         listen 80;
         server_name mongo.example.com;

         location / {
             proxy_pass http://localhost:27017;  # Redirect to MongoDB port
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
         }
     }
     ```

2. **Enable the Configuration:**
   - Create a symbolic link to enable this configuration:
     ```bash
     sudo ln -s /etc/nginx/sites-available/mongo.example.com /etc/nginx/sites-enabled/
     ```

3. **Test and Restart Nginx:**
   - Test the configuration for syntax errors:
     ```bash
     sudo nginx -t
     ```
   - Restart Nginx to apply the changes:
     ```bash
     sudo systemctl restart nginx
     ```

## Step 3: Secure the Subdomain with SSL

Using SSL certificates ensures that the data transmitted between the client and server is encrypted.

1. **Install Certbot:**
   - If not already installed, you can set up Certbot using:
     ```bash
     sudo apt update
     sudo apt install certbot python3-certbot-nginx
     ```

2. **Obtain and Install SSL Certificate:**
   - Run Certbot to obtain a certificate for your subdomain:
     ```bash
     sudo certbot --nginx -d mongo.example.com
     ```
   - Follow the prompts to complete the setup. Certbot will automatically configure Nginx to use the SSL certificate.

3. **Verify SSL Configuration:**
   - Ensure your Nginx configuration file now includes SSL settings. It should look something like this:
     ```nginx
     server {
         listen 443 ssl;
         server_name mongo.example.com;

         ssl_certificate /etc/letsencrypt/live/mongo.example.com/fullchain.pem;
         ssl_certificate_key /etc/letsencrypt/live/mongo.example.com/privkey.pem;

         location / {
             proxy_pass http://localhost:27017;
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
         }
     }

     server {
         listen 80;
         server_name mongo.example.com;
         return 301 https://$server_name$request_uri;
     }
     ```

## Step 4: Secure MongoDB Access

Ensuring that your MongoDB instance is secure is paramount when allowing remote connections.

1. **Enable Authentication:**
   - Modify your MongoDB configuration file (`mongod.conf`) to enable authentication:
     ```yaml
     security:
       authorization: enabled
     ```
   - Restart MongoDB for the changes to take effect:
     ```bash
     sudo systemctl restart mongod
     ```

2. **Create a MongoDB User:**
   - Access your MongoDB shell:
     ```bash
     mongo
     ```
   - Switch to the admin database and create a new user:
     ```javascript
     use admin
     db.createUser({
       user: "username",
       pwd: "strongpassword",
       roles: [ { role: "readWrite", db: "yourdatabase" } ]
     })
     ```

## Step 5: Connect to MongoDB via Subdomain

With the subdomain and SSL in place, you can connect to MongoDB using the following connection string format:

```plaintext
mongodb://username:strongpassword@mongo.example.com/yourdatabase?authSource=admin&tls=true
```

This connection string ensures that your MongoDB client uses TLS for encrypted communication.

## Conclusion

Setting up a subdomain for MongoDB access provides a structured approach to managing and securing remote database connections. By utilizing Nginx, PM2, and Certbot, you create a robust environment that prioritizes security and performance. Always remember to monitor your server logs and update your security configurations regularly to protect against potential threats.
